package android.pitchimprover;


import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.view.Display;
import android.view.Gravity;
import android.view.WindowManager;


public class ExcercisePerfect extends ExcerciseHelper 
{

  public int state_pending = 0;
  public int state_waiting = 1;
  public int state_answered = 3;
  public int state_level_complete = 4;

  public int state;
  public int level;
  public boolean two_tones;
  public int correct_in_row;


  public int prev_tone;
  public int current_tone;
  public int current_answer;
  public int wrong_tone0;
  public int wrong_tone1;

  private int num_tries;

  public int key_state_disabled = 0;
  public int key_state_active = 1;
  public int key_state_pressed = 2;
  public int key_state_active_pressed = 3;

  public boolean[] keys_down;

  private Progress progress;

  private Keyboard kbrd;
  private Context m_context;

  private TextHelper root_text;


  private MButton exitBtn;
  private boolean exited;
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// void ExcercisePerfect(Canvas canvas)
  ExcercisePerfect(Context context)
  {
    two_tones = false;
    num_tries = 0;

    current_tone = -1;
    prev_tone = -1;
    current_answer = -1;
    correct_in_row = 0;
    num_tries = 0;
    m_context = context;

    init(context);
    root_text = new TextHelper(5, 100, 30, 20, Constants.toneName(5),15.0f,context, Gravity.CENTER);

    newTask();
    keys_down = new boolean[Constants.num_tones_in_octave * Constants.num_octaves];
    for (int ind = 0; ind < keys_down.length; ++ind)
      keys_down[ind] = false;

    progress = new Progress(getNumLevels(), context, this);
    kbrd = new Keyboard(context, true);
    Display display = ((WindowManager)context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
    int full_w = display.getWidth();
    int full_h = display.getHeight();

    int toolbar_delta = 30;
    exitBtn = new MButton(full_w - full_w/5,   full_h - full_h/5 - toolbar_delta, full_w/5, full_h/5, "Exit", context);

    exited = false;
    setLevel(0); 
    resetState();
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
  public void setLevel(int i_lvl)
  {
    level = i_lvl;
    //resetState();
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
  public int getLevel()
  {
    return level;
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
  public int getNumLevels()
  {
    return 11;
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                
  public void mouseMove(int x,int y)
  {
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  private int getKeyboardFocusX()
  {
    int keyboard_x = 0;

    keyboard_x = kbrd.getKeyX(getOctaveIndex()*12);

    return keyboard_x;
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  private int getOctaveIndex()
  {
    if(current_tone != -1)
      return current_tone/12;

    return 0;
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                
  public void mouseDown(int x,int y)
  {
    //if clicked anywhere, the result window must disappear
    clickedAnywhere();

    if(exitBtn.hitTestPoint(x, y))
    {
      exited = true;
      return;
    }

    if (progress.checkLevelChange(x, y))
      return;

    if (kbrd.playHitTest(x, y))
    {
      playTask();
      return;
    }

    int kbdx = getKeyboardFocusX();
    int key_num = kbrd.keyHitTest(kbdx, x, y);

    if (key_num == -1)
      return;

    keys_down[key_num] = true;
    keyPressed(key_num);
  }    

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                
  public void mouseUp(int x,int y)
  {
    for (int ind = 0; ind < keys_down.length; ++ind)
      keys_down[ind] = false;
  }  

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
  public void Pend()
  {
    if (state == state_answered || state == state_level_complete)
      state = state_pending;
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
  public void newTask()
  {
    current_tone = randomTone();
  }    

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
  public int randomTone()
  {
    int ret = current_tone;

    while (ret == current_tone)
    {
      ret = _randomTone();
    }

    return ret;
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////          
  public int _randomTone()
  {
    int octave_ind = RandomUtil.getMod(Constants.num_octaves);

    if (two_tones)
    {
      int tone_ind = RandomUtil.getMod(2);

      return ((tone_ind == 0) ? wrong_tone0 : wrong_tone1) + octave_ind*Constants.num_tones_in_octave;
    }

    int num_tones = Math.min(level, Constants.num_levels - 1) + 2;
    int tone_ind = RandomUtil.getMod(num_tones);

    return (Constants.tones[tone_ind] + octave_ind*Constants.num_tones_in_octave);
  }    
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  public void resetState()
  {
    two_tones = false;
    state = state_pending;
    correct_in_row = 0;
    setLevel(progress.level);
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  public void clickedAnywhere()   
  {
    if (state == state_answered || state == state_level_complete)
      state = state_pending;
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  public void playTask()
  {
    if (state == state_pending)
    {
      newTask();
      state = state_waiting;
    }

    SoundManager.playSound(m_context, current_tone);
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  public boolean isActive(int key)
  {
    int keymod = key % Constants.num_tones_in_octave;

    if (two_tones)
      return (keymod == wrong_tone0 || keymod == wrong_tone1);

    for (int i = 0; i < level + 2; ++i)
      if (Constants.tones[i] == keymod)
        return true;

    return false;
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  public void keyPressed(int key_num)
  {
    if (key_num == -1)
      return;

    keys_down[key_num] = true;

    SoundManager.playSound(m_context, key_num);

    if (state == state_waiting && isActive(key_num))
    {
      ++num_tries;
      state = state_answered;
      current_answer = key_num;
      boolean correct = TestingHelper.always_true ? true : (current_answer == current_tone);// % Constants.num_tones_in_octave);

      if (correct)
        ++correct_in_row;
      else
      {
        correct_in_row = 0;

        if (level > 0 && !two_tones)
        {
          two_tones = true;
          wrong_tone0 = current_answer % Constants.num_tones_in_octave;
          wrong_tone1 = current_tone % Constants.num_tones_in_octave;
        }
      }

      if ((level != Constants.num_levels) && correct_in_row >= correctNeeded())
      { 
        if (!two_tones)
        {
          if (level < getNumLevels())
            ++level;

          two_tones= false;
          correct_in_row = 0;
          state = state_level_complete;
        }

        correct_in_row = 0;
        two_tones = false;
      }
    }

  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
  public int getCorrectInRow()
  {
    return correct_in_row;
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
  public int correctNeeded()
  {
    if(TestingHelper.testing)
      return 1;
    
    if (two_tones)
      return 10;

    if (level < 4)
      return 20;

    if (level < 8)
      return 25;

    return 30;
  }    

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
  public void subscribeRoot(Canvas canvas)
  {
    Display display = ((WindowManager)m_context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();

    int root = getOctaveIndex()*12;
    int x = kbrd.getKeyX(root) - getKeyboardFocusX();
    int y = kbrd.getKeysH();

    if(kbrd.isBlack(root))
      y -= kbrd.getKeySize(display.getHeight());

    root_text.setTextColor(Color.BLACK);
    root_text.setSize(kbrd.getKeySize(display.getHeight()), kbrd.getKeySize(display.getHeight()));
    root_text.moveTo(x, y);
    root_text.setText(Constants.toneName(root) + Integer.toString((int)Math.floor(root/12)+1));
    root_text.draw(canvas);
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  public void subscribeLevel(Canvas canvas)
  {
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  public void drawPrompt(Canvas canvas)
  {
    drawSubText("What tone is it?", m_context, canvas);
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    

  public void draw(Canvas canvas)
  {
    canvas.drawColor(Color.BLACK);

    if (playOrRepeat())
      kbrd.drawPlay(canvas);
    else
      kbrd.drawRepeat(canvas);

    drawKeys(0, kbrd.getKeysH(), canvas);

    progress.updateBtnEnabling();
    progress.level = getLevel();

    if (state == state_answered || state == state_level_complete)
    {
      if (state == state_level_complete)
        if (level == getNumLevels())
          drawGameOver(canvas);
        else
          drawLevelComplete(canvas);

      if (state == state_answered)
        drawAnswer(canvas);
    }

    if (state == state_waiting)
    {
      drawPrompt(canvas);
      subscribeRoot(canvas);
    }

    progress.drawProgress(getCorrectInRow(), correctNeeded(), canvas);

    exitBtn.draw(canvas);
  }


  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  private void drawKeys(int x,int y,Canvas canvas)
  {
    int keyboard_x = getKeyboardFocusX();

    for (int octave_ind = 0; octave_ind < Constants.num_octaves; ++octave_ind)
    {
      for (int tone_ind = 0; tone_ind < Constants.num_tones_in_octave; ++tone_ind)
      {
        int tone = tone_ind + octave_ind *Constants.num_tones_in_octave;
        int tone_state = 0;
        if (isActive(tone))
          tone_state = key_state_active;
        else
          tone_state = key_state_disabled;

        if (keys_down[tone])
          if (isActive(tone))
            tone_state = key_state_active_pressed;
          else
            tone_state = key_state_pressed;


        kbrd.drawKey(keyboard_x, y, tone, canvas, tone_state);
      }
    }
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  public boolean playOrRepeat()
  {
    return !(state == state_waiting);
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  public void drawAnswer(Canvas canvas)
  {
    boolean correct = (current_answer == current_tone);

    int answer_tone = current_answer % Constants.num_tones_in_octave;

    String[] correct_strs = {"Correct.", "Right!", "Yes.", "Indeed.", "You are right."};
    String[] wrong_strs = {"Wrong.", "Sorry.", "No.", "Oops!"};

    //the sum sort of emulates randomness, but is stable between user inputs.
    String correct_str = correct_strs[(num_tries + current_tone + answer_tone)%correct_strs.length];
    String wrong_str = wrong_strs[(num_tries + current_tone + answer_tone)%wrong_strs.length];

    String answertext = (correct ? correct_str + "\n" : wrong_str + "\n") ;


    answertext += "It is ";
    answertext += Constants.tone_names[current_tone % Constants.num_tones_in_octave];
    double true_octave = Math.floor(current_tone / Constants.num_tones_in_octave)+1;
    answertext += "(" + Integer.toString((int)true_octave) + ")";

    if(!correct)
    {
      answertext += ", not ";
      answertext += Constants.tone_names[answer_tone];

      double answer_octave = Math.floor(current_answer / Constants.num_tones_in_octave)+1;
      answertext += "(" + Integer.toString((int)answer_octave) + ")";
    }

    drawMessageBox(answertext, m_context, canvas);
  }
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  public void drawPending(Canvas canvas)
  {
    String text = "Press play to hear tone";
    drawSubText(text, m_context, canvas);
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  public void drawLevelComplete(Canvas canvas)
  {
    String text = ("Level "+ Integer.toString(level+1) + "\n"  + "New tone: "+ Constants.tone_names[Constants.tones[level+1]]);
    drawMessageBox(text, m_context, canvas);
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
  public void drawGameOver(Canvas canvas)
  {
    String text = "Congratulations, great job!\n Now you can practice further,\n or try your pitch with \n other instruments.";
    drawMessageBox(text, m_context, canvas);
  }

  @Override
  public boolean exit() 
  {
    return exited;
  }
}

